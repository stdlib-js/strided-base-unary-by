{"version":3,"file":"index.mjs","sources":["../lib/unary.ndarray.js","../lib/accessors.ndarray.js","../lib/main.js","../lib/accessors.js","../lib/unary.js","../lib/ndarray.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a unary function to each element retrieved from a strided input array according to a callback function and assigns results to a strided output array.\n*\n* @private\n* @param {ArrayLikeObject<Collection>} arrays - array-like object containing one input array and one output array\n* @param {NonNegativeIntegerArray} shape - array-like object containing a single element, the number of indexed elements\n* @param {IntegerArray} strides - array-like object containing the stride lengths for the input and output arrays\n* @param {NonNegativeIntegerArray} offsets - array-like object containing the starting indices (i.e., index offsets) for the input and output arrays\n* @param {Function} fcn - unary function to apply to callback return values\n* @param {Callback} clbk - callback\n* @param {*} [thisArg] - callback execution context\n* @returns {void}\n*\n* @example\n* import abs from '@stdlib/math-base-special-abs';\n*\n* function accessor( v ) {\n*     return v * 2.0;\n* }\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0, 5.0 ];\n* var y = [ 0.0, 0.0, 0.0, 0.0, 0.0 ];\n*\n* var shape = [ x.length ];\n* var strides = [ 1, 1 ];\n* var offsets = [ 0, 0 ];\n*\n* unaryBy( [ x, y ], shape, strides, offsets, abs, accessor );\n*\n* console.log( y );\n* // => [ 2.0, 4.0, 6.0, 8.0, 10.0 ]\n*/\nfunction unaryBy( arrays, shape, strides, offsets, fcn, clbk, thisArg ) {\n\tvar sx;\n\tvar sy;\n\tvar ix;\n\tvar iy;\n\tvar x;\n\tvar y;\n\tvar N;\n\tvar v;\n\tvar i;\n\n\tN = shape[ 0 ];\n\tif ( N <= 0 ) {\n\t\treturn;\n\t}\n\tix = offsets[ 0 ];\n\tiy = offsets[ 1 ];\n\tsx = strides[ 0 ];\n\tsy = strides[ 1 ];\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = clbk.call( thisArg, x[ ix ], i, [ ix, iy ], [ x, y ] );\n\t\tif ( v !== void 0 ) {\n\t\t\ty[ iy ] = fcn( v );\n\t\t}\n\t\tix += sx;\n\t\tiy += sy;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unaryBy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a unary function to each element retrieved from a strided input array according to a callback function and assigns results to a strided output array.\n*\n* @private\n* @param {ArrayLikeObject<Collection>} arrays - array-like object containing one input array and one output array\n* @param {NonNegativeIntegerArray} shape - array-like object containing a single element, the number of indexed elements\n* @param {IntegerArray} strides - array-like object containing the stride lengths for the input and output arrays\n* @param {NonNegativeIntegerArray} offsets - array-like object containing the starting indices (i.e., index offsets) for the input and output arrays\n* @param {Array<Function>} accessors - array-like object containing accessors for the input and output arrays\n* @param {Function} fcn - unary function to apply to callback return values\n* @param {Callback} clbk - callback\n* @param {*} [thisArg] - callback execution context\n* @returns {void}\n*\n* @example\n* import abs from '@stdlib/math-base-special-abs';\n*\n* function accessor( v ) {\n*     return v;\n* }\n*\n* function xget( buf, idx ) {\n*     return buf[ idx ] * 2.0;\n* }\n*\n* function yset( buf, idx, value ) {\n*     buf[ idx ] = value;\n* }\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0, 5.0 ];\n* var y = [ 0.0, 0.0, 0.0, 0.0, 0.0 ];\n*\n* var shape = [ x.length ];\n* var strides = [ 1, 1 ];\n* var offsets = [ 0, 0 ];\n*\n* unaryBy( [ x, y ], shape, strides, offsets, [ xget, yset ], abs, accessor );\n*\n* console.log( y );\n* // => [ 2.0, 4.0, 6.0, 8.0, 10.0 ]\n*/\nfunction unaryBy( arrays, shape, strides, offsets, accessors, fcn, clbk, thisArg ) { // eslint-disable-line max-len\n\tvar xget;\n\tvar yset;\n\tvar sx;\n\tvar sy;\n\tvar ix;\n\tvar iy;\n\tvar x;\n\tvar y;\n\tvar N;\n\tvar v;\n\tvar i;\n\n\tN = shape[ 0 ];\n\tif ( N <= 0 ) {\n\t\treturn;\n\t}\n\tix = offsets[ 0 ];\n\tiy = offsets[ 1 ];\n\tsx = strides[ 0 ];\n\tsy = strides[ 1 ];\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\txget = accessors[ 0 ];\n\tyset = accessors[ 1 ];\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = clbk.call( thisArg, xget( x, ix ), i, [ ix, iy ], [ x, y ] );\n\t\tif ( v !== void 0 ) {\n\t\t\tyset( y, iy, fcn( v ) );\n\t\t}\n\t\tix += sx;\n\t\tiy += sy;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unaryBy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isAccessorArray from '@stdlib/array-base-assert-is-accessor-array';\nimport accessorGetter from '@stdlib/array-base-accessor-getter';\nimport accessorSetter from '@stdlib/array-base-accessor-setter';\nimport getter from '@stdlib/array-base-getter';\nimport setter from '@stdlib/array-base-setter';\nimport dtype from '@stdlib/array-dtype';\nimport strided from './unary.js';\nimport accessors from './accessors.js';\n\n\n// MAIN //\n\n/**\n* Applies a unary function to each element retrieved from a strided input array according to a callback function and assigns results to a strided output array.\n*\n* @param {ArrayLikeObject<Collection>} arrays - array-like object containing one input array and one output array\n* @param {NonNegativeIntegerArray} shape - array-like object containing a single element, the number of indexed elements\n* @param {IntegerArray} strides - array-like object containing the stride lengths for the input and output arrays\n* @param {Function} fcn - unary function to apply to callback return values\n* @param {Callback} clbk - callback\n* @param {*} [thisArg] - callback execution context\n* @returns {void}\n*\n* @example\n* import abs from '@stdlib/math-base-special-abs';\n*\n* function accessor( v ) {\n*     return v * 2.0;\n* }\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0, 5.0 ];\n* var y = [ 0.0, 0.0, 0.0, 0.0, 0.0 ];\n*\n* var shape = [ x.length ];\n* var strides = [ 1, 1 ];\n*\n* unaryBy( [ x, y ], shape, strides, abs, accessor );\n*\n* console.log( y );\n* // => [ 2.0, 4.0, 6.0, 8.0, 10.0 ]\n*/\nfunction unaryBy( arrays, shape, strides, fcn, clbk ) {\n\tvar thisArg;\n\tvar xget;\n\tvar yset;\n\tvar x;\n\tvar y;\n\n\tif ( arguments.length > 5 ) {\n\t\tthisArg = arguments[ 5 ];\n\t}\n\tx = arrays[ 0 ];\n\tif ( isAccessorArray( x ) ) {\n\t\txget = accessorGetter( dtype( x ) );\n\t}\n\ty = arrays[ 1 ];\n\tif ( isAccessorArray( y ) ) {\n\t\tyset = accessorSetter( dtype( y ) );\n\t}\n\tif ( xget || yset ) {\n\t\txget = xget || getter( dtype( x ) );\n\t\tyset = yset || setter( dtype( y ) );\n\t\treturn accessors( arrays, shape, strides, [ xget, yset ], fcn, clbk, thisArg ); // eslint-disable-line max-len\n\t}\n\treturn strided( arrays, shape, strides, fcn, clbk, thisArg );\n}\n\n\n// EXPORTS //\n\nexport default unaryBy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided-base-stride2offset';\nimport ndarray from './accessors.ndarray.js';\n\n\n// MAIN //\n\n/**\n* Applies a unary function to each element retrieved from a strided input array according to a callback function and assigns results to a strided output array.\n*\n* @private\n* @param {ArrayLikeObject<Collection>} arrays - array-like object containing one input array and one output array\n* @param {NonNegativeIntegerArray} shape - array-like object containing a single element, the number of indexed elements\n* @param {IntegerArray} strides - array-like object containing the stride lengths for the input and output arrays\n* @param {Array<Function>} accessors - array-like object containing accessors for the input and output arrays\n* @param {Function} fcn - unary function to apply to callback return values\n* @param {Callback} clbk - callback\n* @param {*} [thisArg] - callback execution context\n* @returns {void}\n*\n* @example\n* import abs from '@stdlib/math-base-special-abs';\n*\n* function accessor( v ) {\n*     return v;\n* }\n*\n* function xget( buf, idx ) {\n*     return buf[ idx ] * 2.0;\n* }\n*\n* function yset( buf, idx, value ) {\n*     buf[ idx ] = value;\n* }\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0, 5.0 ];\n* var y = [ 0.0, 0.0, 0.0, 0.0, 0.0 ];\n*\n* var shape = [ x.length ];\n* var strides = [ 1, 1 ];\n*\n* unaryBy( [ x, y ], shape, strides, [ xget, yset ], abs, accessor );\n*\n* console.log( y );\n* // => [ 2.0, 4.0, 6.0, 8.0, 10.0 ]\n*/\nfunction unaryBy( arrays, shape, strides, accessors, fcn, clbk, thisArg ) {\n\tvar offsets;\n\tvar N;\n\n\tN = shape[ 0 ];\n\toffsets = [\n\t\tstride2offset( N, strides[ 0 ] ),\n\t\tstride2offset( N, strides[ 1 ] )\n\t];\n\treturn ndarray( arrays, shape, strides, offsets, accessors, fcn, clbk, thisArg );\n}\n\n\n// EXPORTS //\n\nexport default unaryBy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided-base-stride2offset';\nimport ndarray from './unary.ndarray.js';\n\n\n// MAIN //\n\n/**\n* Applies a unary function to each element retrieved from a strided input array according to a callback function and assigns results to a strided output array.\n*\n* @private\n* @param {ArrayLikeObject<Collection>} arrays - array-like object containing one input array and one output array\n* @param {NonNegativeIntegerArray} shape - array-like object containing a single element, the number of indexed elements\n* @param {IntegerArray} strides - array-like object containing the stride lengths for the input and output arrays\n* @param {Function} fcn - unary function to apply to callback return values\n* @param {Callback} clbk - callback\n* @param {*} [thisArg] - callback execution context\n* @returns {void}\n*\n* @example\n* import abs from '@stdlib/math-base-special-abs';\n*\n* function accessor( v ) {\n*     return v * 2.0;\n* }\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0, 5.0 ];\n* var y = [ 0.0, 0.0, 0.0, 0.0, 0.0 ];\n*\n* var shape = [ x.length ];\n* var strides = [ 1, 1 ];\n*\n* unaryBy( [ x, y ], shape, strides, abs, accessor );\n*\n* console.log( y );\n* // => [ 2.0, 4.0, 6.0, 8.0, 10.0 ]\n*/\nfunction unaryBy( arrays, shape, strides, fcn, clbk, thisArg ) {\n\tvar offsets;\n\tvar N;\n\n\tN = shape[ 0 ];\n\toffsets = [\n\t\tstride2offset( N, strides[ 0 ] ),\n\t\tstride2offset( N, strides[ 1 ] )\n\t];\n\treturn ndarray( arrays, shape, strides, offsets, fcn, clbk, thisArg );\n}\n\n\n// EXPORTS //\n\nexport default unaryBy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isAccessorArray from '@stdlib/array-base-assert-is-accessor-array';\nimport accessorGetter from '@stdlib/array-base-accessor-getter';\nimport accessorSetter from '@stdlib/array-base-accessor-setter';\nimport getter from '@stdlib/array-base-getter';\nimport setter from '@stdlib/array-base-setter';\nimport dtype from '@stdlib/array-dtype';\nimport strided from './unary.ndarray.js';\nimport accessors from './accessors.ndarray.js';\n\n\n// MAIN //\n\n/**\n* Applies a unary function to each element retrieved from a strided input array according to a callback function and assigns results to a strided output array.\n*\n* @param {ArrayLikeObject<Collection>} arrays - array-like object containing one input array and one output array\n* @param {NonNegativeIntegerArray} shape - array-like object containing a single element, the number of indexed elements\n* @param {IntegerArray} strides - array-like object containing the stride lengths for the input and output arrays\n* @param {NonNegativeIntegerArray} offsets - array-like object containing the starting indices (i.e., index offsets) for the input and output arrays\n* @param {Function} fcn - unary function to apply to callback return values\n* @param {Callback} clbk - callback\n* @param {*} [thisArg] - callback execution context\n* @returns {void}\n*\n* @example\n* import abs from '@stdlib/math-base-special-abs';\n*\n* function accessor( v ) {\n*     return v * 2.0;\n* }\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0, 5.0 ];\n* var y = [ 0.0, 0.0, 0.0, 0.0, 0.0 ];\n*\n* var shape = [ x.length ];\n* var strides = [ 1, 1 ];\n* var offsets = [ 0, 0 ];\n*\n* unaryBy( [ x, y ], shape, strides, offsets, abs, accessor );\n*\n* console.log( y );\n* // => [ 2.0, 4.0, 6.0, 8.0, 10.0 ]\n*/\nfunction unaryBy( arrays, shape, strides, offsets, fcn, clbk ) {\n\tvar thisArg;\n\tvar xget;\n\tvar yset;\n\tvar x;\n\tvar y;\n\n\tif ( arguments.length > 6 ) {\n\t\tthisArg = arguments[ 6 ];\n\t}\n\tx = arrays[ 0 ];\n\tif ( isAccessorArray( x ) ) {\n\t\txget = accessorGetter( dtype( x ) );\n\t}\n\ty = arrays[ 1 ];\n\tif ( isAccessorArray( y ) ) {\n\t\tyset = accessorSetter( dtype( y ) );\n\t}\n\tif ( xget || yset ) {\n\t\txget = xget || getter( dtype( x ) );\n\t\tyset = yset || setter( dtype( y ) );\n\t\treturn accessors( arrays, shape, strides, offsets, [ xget, yset ], fcn, clbk, thisArg ); // eslint-disable-line max-len\n\t}\n\treturn strided( arrays, shape, strides, offsets, fcn, clbk, thisArg );\n}\n\n\n// EXPORTS //\n\nexport default unaryBy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Apply a unary function to each element retrieved from a strided input array according to a callback function and assign results to a strided output array.\n*\n* @module @stdlib/strided-base-unary-by\n*\n* @example\n* import abs from '@stdlib/math-base-special-abs';\n* import unaryBy from '@stdlib/strided-base-unary-by';\n*\n* function accessor( v ) {\n*     return v * 2.0;\n* }\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0, 5.0 ];\n* var y = [ 0.0, 0.0, 0.0, 0.0, 0.0 ];\n*\n* var shape = [ x.length ];\n* var strides = [ 1, 1 ];\n*\n* unaryBy( [ x, y ], shape, strides, abs, accessor );\n*\n* console.log( y );\n* // => [ 2.0, 4.0, 6.0, 8.0, 10.0 ]\n*\n* @example\n* import abs from '@stdlib/math-base-special-abs';\n* import unaryBy from '@stdlib/strided-base-unary-by';\n*\n* function accessor( v ) {\n*     return v * 2.0;\n* }\n*\n* var x = [ 1.0, -2.0, 3.0, -4.0, 5.0 ];\n* var y = [ 0.0, 0.0, 0.0, 0.0, 0.0 ];\n*\n* var shape = [ x.length ];\n* var strides = [ 1, 1 ];\n* var offsets = [ 0, 0 ];\n*\n* unaryBy.ndarray( [ x, y ], shape, strides, offsets, abs, accessor );\n*\n* console.log( y );\n* // => [ 2.0, 4.0, 6.0, 8.0, 10.0 ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n"],"names":["unaryBy","arrays","shape","strides","offsets","fcn","clbk","thisArg","sx","sy","ix","iy","x","y","N","v","i","call","accessors","xget","yset","arguments","length","isAccessorArray","accessorGetter","dtype","accessorSetter","ndarray","stride2offset","getter","setter","strided","setReadOnly","main"],"mappings":";;4xBAsDA,SAASA,EAASC,EAAQC,EAAOC,EAASC,EAASC,EAAKC,EAAMC,GAC7D,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAGJ,MADAF,EAAIZ,EAAO,KACD,GASV,IANAQ,EAAKN,EAAS,GACdO,EAAKP,EAAS,GACdI,EAAKL,EAAS,GACdM,EAAKN,EAAS,GACdS,EAAIX,EAAQ,GACZY,EAAIZ,EAAQ,GACNe,EAAI,EAAGA,EAAIF,EAAGE,SAER,KADXD,EAAIT,EAAKW,KAAMV,EAASK,EAAGF,GAAMM,EAAG,CAAEN,EAAIC,GAAM,CAAEC,EAAGC,OAEpDA,EAAGF,GAAON,EAAKU,IAEhBL,GAAMF,EACNG,GAAMF,CAER,CCpBA,SAAST,EAASC,EAAQC,EAAOC,EAASC,EAASc,EAAWb,EAAKC,EAAMC,GACxE,IAAIY,EACAC,EACAZ,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAGJ,MADAF,EAAIZ,EAAO,KACD,GAWV,IARAQ,EAAKN,EAAS,GACdO,EAAKP,EAAS,GACdI,EAAKL,EAAS,GACdM,EAAKN,EAAS,GACdS,EAAIX,EAAQ,GACZY,EAAIZ,EAAQ,GACZkB,EAAOD,EAAW,GAClBE,EAAOF,EAAW,GACZF,EAAI,EAAGA,EAAIF,EAAGE,SAER,KADXD,EAAIT,EAAKW,KAAMV,EAASY,EAAMP,EAAGF,GAAMM,EAAG,CAAEN,EAAIC,GAAM,CAAEC,EAAGC,MAE1DO,EAAMP,EAAGF,EAAIN,EAAKU,IAEnBL,GAAMF,EACNG,GAAMF,CAER,CCjCA,SAAST,EAASC,EAAQC,EAAOC,EAASE,EAAKC,GAC9C,IAAIC,EACAY,EACAC,EACAR,EACAC,EAaJ,OAXKQ,UAAUC,OAAS,IACvBf,EAAUc,UAAW,IAEtBT,EAAIX,EAAQ,GACPsB,EAAiBX,KACrBO,EAAOK,EAAgBC,EAAOb,KAE/BC,EAAIZ,EAAQ,GACPsB,EAAiBV,KACrBO,EAAOM,EAAgBD,EAAOZ,KAE1BM,GAAQC,ECdd,SAAkBnB,EAAQC,EAAOC,EAASe,EAAWb,EAAKC,EAAMC,GAC/D,IACIO,EAOJ,OALAA,EAAIZ,EAAO,GAKJyB,EAAS1B,EAAQC,EAAOC,EAJrB,CACTyB,EAAed,EAAGX,EAAS,IAC3ByB,EAAed,EAAGX,EAAS,KAEqBe,EAAWb,EAAKC,EAAMC,EACxE,CDOSW,CAAWjB,EAAQC,EAAOC,EAAS,CAF1CgB,EAAOA,GAAQU,EAAQJ,EAAOb,IAC9BQ,EAAOA,GAAQU,EAAQL,EAAOZ,KAC4BR,EAAKC,EAAMC,GE1BvE,SAAkBN,EAAQC,EAAOC,EAASE,EAAKC,EAAMC,GACpD,IACIO,EAOJ,OALAA,EAAIZ,EAAO,GAKJyB,EAAS1B,EAAQC,EAAOC,EAJrB,CACTyB,EAAed,EAAGX,EAAS,IAC3ByB,EAAed,EAAGX,EAAS,KAEqBE,EAAKC,EAAMC,EAC7D,CFkBQwB,CAAS9B,EAAQC,EAAOC,EAASE,EAAKC,EAAMC,EACpD,CGtBA,SAASP,EAASC,EAAQC,EAAOC,EAASC,EAASC,EAAKC,GACvD,IAAIC,EACAY,EACAC,EACAR,EACAC,EAaJ,OAXKQ,UAAUC,OAAS,IACvBf,EAAUc,UAAW,IAEtBT,EAAIX,EAAQ,GACPsB,EAAiBX,KACrBO,EAAOK,EAAgBC,EAAOb,KAE/BC,EAAIZ,EAAQ,GACPsB,EAAiBV,KACrBO,EAAOM,EAAgBD,EAAOZ,KAE1BM,GAAQC,EAGLF,EAAWjB,EAAQC,EAAOC,EAASC,EAAS,CAFnDe,EAAOA,GAAQU,EAAQJ,EAAOb,IAC9BQ,EAAOA,GAAQU,EAAQL,EAAOZ,KACqCR,EAAKC,EAAMC,GAExEwB,EAAS9B,EAAQC,EAAOC,EAASC,EAASC,EAAKC,EAAMC,EAC7D,CCfAyB,EAAAC,EAAA,UAAAN"}